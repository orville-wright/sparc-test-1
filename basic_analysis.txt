#! python3

import logging

from rich import print
import argparse

logging.basicConfig(level=logging.INFO)

from shallow_logic import combo_logic

# generate FINAL combo list ################################################################################
# combine all the findings into 1 place - single source of truth
    """
    DEEP amalysis means - try to understand & inferr plain language reasons as to why these stock are
    appearing in the final 'Single Source of Truth' combo_df. Having a big list of top mover/highly active
    stocks isn't meaningful unless you can understand (quickly in real-time) whats going on with each one.
    From here, you can plan to do something... otherwise, this is just a meaningless list.
    NOTE: Most of this logic prepares/cleans/wrangles data into a perfect combo_df 'Single Source of Truth'.
    """
    args = []               # class dict to hold global args being passed in from main() methods

    if args['bool_deep'] is True and args['bool_scr'] is True and args['bool_uvol'] is True:
        x = combo_logic(1, mlx_top_dataset, small_cap_dataset, un_vol_activity, args )
        x.polish_combo_df(1)
        x.tag_dupes()
        x.tag_uniques()
        x.rank_hot()       # currently disabled b/c it errors. pandas statment needs to be simplifed and split
        #x.find_hottest()
        x.rank_unvol()     # ditto
        x.rank_caps()      # ditto
        x.combo_df.sort_values(by=['Symbol'])         # sort by sumbol name (so dupes are linearly grouped)
        x.reindex_combo_df()                          # re-order a new index (PERMENANT write)

# Summarize combo list key findings ##################################################################
        # Curious Outliers
        # temp_1 = x.combo_df.sort_values(by=['Pct_change'], ascending=False)
        # temp_1 = x.combo_df.sort_values(by=['Symbol'])                        # sort by sumbol name (so dupes are linearly grouped)
        # temp_1.reset_index(inplace=True, drop=True)                           # reset index

        x.find_hottest()

        print ( f"========== Hot stock anomolies ===================================================" )
        if x.combo_dupes_only_listall(1).empty:
            print ( f"NONE found at moment" )
        else:
            print ( f"{x.combo_dupes_only_listall(1)}" )

        print ( " " )
        print ( f"========== Full System of Truth  ===================================================" )
        print ( f"\n{x.combo_df}" )    # sort by %
        print ( " " )

        print ( "========== ** OUTLIERS ** : Unusual UP volume + Top Gainers by +5% ================================" )
        print ( " " )
        temp_1 = x.combo_df.sort_values(by=['Pct_change'], ascending=False) 
        print ( f"{temp_1}" )       # DUPLES in the DF = a curious outlier
        # print ( f"{temp_1[temp_1.duplicated(['Symbol'], keep='first')]}" )    # DUPLES in the DF = a curious outlier
        #print ( f"{temp_1[temp_1.duplicated(['Symbol'], keep='last')]}" )       # DUPLES in the DF = a curious outlier
        print ( " " )
        print ( f"================= >>COMBO<< Full list of intersting market observations ==================" )
        #print ( f"{x.combo_listall_nodupes()}" )
        temp_2 = x.combo_listall_nodupes()                                      # dupes by SYMBOL only
        print ( f"{temp_2.sort_values(by=['Pct_change'], ascending=False)}" )

        if len(x.rx) == 0:      # rx=[] holds hottest stock with lowest price overall
            print ( " " )       # empty list[] = no stock found yet (prob very early in trading morning)
            print ( f"No **hot** stock for >>LOW<< buy-in recommendations list yet" )
        else:
            hotidx = x.rx[0]
            hotsym = x.rx[1]
            hotp = x.combo_df.at[hotidx, 'Cur_price']
            #hotp = x.combo_df.loc[[x.combo_df['Symbol'] == hotsym], ['Cur_price']]
            hotname = x.combo_df.at[hotidx, 'Co_name']
            hotpct = x.combo_df.at[hotidx, 'Pct_change']
            #hotname = x.combo_df.loc[hotidx, ['Co_name']][0]
            print ( " " )       # empty list[] = no stock found yet (prob very early in trading morning)

            #row_index = x.combo_df.loc[x.combo_df['Symbol'] == hotsym.rstrip()].index[0]

            #recommended['3'] = ('Hottest:', hotsym.rstrip(), '$'+str(hotp), hotname.rstrip(), '+%'+str(x.combo_df.loc[hotidx, ['Pct_change']][0]) )
            recommended['3'] = ('Hottest:', hotsym.rstrip(), '$'+str(hotp), hotname.rstrip(), '+%'+str(x.combo_df.at[hotidx, 'Pct_change']) )
            print ( f"==============================================================================================" )
            print ( f"Best low-buy highest %gain **Hot** OPPTY: {hotsym.rstrip()} - {hotname.rstrip()} / {'$'+str(hotp)} / {'+%'+str(hotpct)} gain" )
            print ( " " )
            print ( " " )

        # lowest priced stock
        clp = x.combo_df['Cur_price'].min()
        cminv = x.combo_df['Cur_price'].idxmin()
        i_got_min = x.combo_df.loc[cminv]

        clsym = i_got_min.at['Symbol']                # get symbol of lowest price item @ index_id
        clname = i_got_min.at['Co_name']              # get name of lowest price item @ index_id
        clupct = i_got_min.at['Pct_change']           # get %change of lowest price item @ index_id

        #clsym = x.combo_df.loc[cminv, ['Symbol']][0]
        #clname = x.combo_df.loc[cminv, ['Co_name']][0]    
        #recommended['4'] = ('Large cap:', clsym.rstrip(), '$'+str(clp), clname.rstrip(), '+%'+str(x.combo_df.loc[cminv, ['Pct_change']][0]) )

        recommended['4'] = ('Large cap:', clsym.rstrip(), '$'+str(clp), clname.rstrip(), '+%'+str(clupct) )

        # Biggest % gainer stock
        cmax = x.combo_df['Pct_change'].idxmax()
        clp = x.combo_df.loc[cmax, 'Cur_price']
        i_got_max = x.combo_df.loc[cmax]

        clsym = i_got_max.at['Symbol']                # get symbol of lowest price item @ index_id
        clname = i_got_max.at['Co_name']              # get name of lowest price item @ index_id
        clupct = i_got_max.at['Pct_change']           # get %change of lowest price item @ index_id
        #recommended['5'] = ('Top % gainer:', clsym.rstrip(), '$'+str(clp), clname.rstrip(), '+%'+str(x.combo_df.loc[cmax, ['Pct_change']][0]) )

        recommended['5'] = ('Top % gainer:', clsym.rstrip(), '$'+str(clp), clname.rstrip(), '+%'+str(clupct) )
        

# Recommendeds ###############################################################
        #  key    recomendation data     - (example output shown)
        # =====================================================================
        #   1:    Small cap % gainer: TXMD $0.818 TherapeuticsMD, Inc. +%7.12
        #   2:    Unusual vol: SPRT $11.17 support.com, Inc. +%26.79
        #   3:    Hottest: AUPH $17.93 Aurinia Pharmaceuticals I +%9.06
        #   4:    Large cap: PHJMF $0.07 PT Hanjaya Mandala Sampoe +%9.2
        #   5:    Top % gainer: SPRT $19.7 support.com, Inc. +%41.12
        # todo: we should do a linear regression on the price curve for each item

        print ( " " )
        print ( f"============ recommendations >>Lowest buy price<< stocks with greatest % gain  =============" )
        print ( " " )
        for k, v in recommended.items():
            print ( f"{k:3}: {v[0]:21} {v[1]:6} {v[3]:28} {v[2]:8} /  {v[4]}" )
            print ( "--------------------------------------------------------------------------------------------" )

# Summary ############### AVERGAES and computed info ##########################
        print ( " " )
        print ( "============== Market activity overview, inisghts & stats =================" )
        avgs_prc = x.combo_grouped(2).round(2)       # insights
        avgs_pct = x.combo_grouped(1).round(2)       # insights

        print ( f"Price average over all stock movemnts" )
        print ( f"{avgs_prc}" )
        print ( " " )
        print ( f"Percent  % average over all stock movemnts" )
        print ( f"{avgs_pct}" )

        #print ( f"Current day average $ gain: ${averages.iloc[-1]['Prc_change'].round(2)}" )
        #print ( f"Current day percent gain:   %{averages.iloc[-1]['Pct_change'].round(2)}" )
